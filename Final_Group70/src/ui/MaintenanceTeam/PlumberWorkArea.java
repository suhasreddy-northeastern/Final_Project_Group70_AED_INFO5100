package ui.MaintenanceTeam;

import business.Business;
import business.EmailAlert.EmailAlert;
import business.Enterprise.MaintenanceTeamEnterprise;
import business.Role.ResidentRole;
import business.UserAccount.UserAccount;
import business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class PlumberWorkArea extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount account;
    MaintenanceTeamEnterprise par;
    Business business;

    public PlumberWorkArea(JPanel userProcessContainer, UserAccount account, MaintenanceTeamEnterprise par, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.par = par;
        this.business = business;
        populateTable();
        populateme();
        enable1();

    }

    public void enable1() {
        if (!account.getWorkQueue().getWorkRequestList().isEmpty()) {

        }

    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        model.setRowCount(0);

        for (WorkRequest request : par.getWorkQueue().getWorkRequestList()) {
            // Check if the request type is "Plumbing"
            if ("Plumbing".equalsIgnoreCase(request.getType())) {
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getSender().id;
                row[2] = request.getReceiver() == null ? null : request.getReceiver().getOrganisation().getName();
                row[3] = request.getStatus();
                row[4] = request.getMessage();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnProcessMyJob = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Assigned = new javax.swing.JTable();
        btnCloseRequest = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Unit No.", "Resident Name", "Assigned", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Plumbers Job Work Portal");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnProcessMyJob.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnProcessMyJob.setText("Process My Job");
        btnProcessMyJob.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnProcessMyJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessMyJobActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButton2.setText("Assign to me");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Assignment To Me");

        Assigned.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Assigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Unit No.", "Resident Name", "Assigned", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Assigned);
        if (Assigned.getColumnModel().getColumnCount() > 0) {
            Assigned.getColumnModel().getColumn(0).setResizable(false);
            Assigned.getColumnModel().getColumn(1).setResizable(false);
            Assigned.getColumnModel().getColumn(2).setResizable(false);
            Assigned.getColumnModel().getColumn(3).setResizable(false);
            Assigned.getColumnModel().getColumn(4).setResizable(false);
        }

        btnCloseRequest.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnCloseRequest.setText("Close Request");
        btnCloseRequest.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCloseRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnProcessMyJob, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCloseRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(600, 600, 600)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(360, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addGap(39, 39, 39)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCloseRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcessMyJob, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        populateme();
        populateTable();
        enable1();

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {

            WorkRequest request = (WorkRequest) jTable1.getValueAt(selectedRow, 0);
            if (request.getMessage().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Request already processed.");
                return;
            } else {

                request.setReceiver(account);
                request.setStatus("Pending");
                account.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Service Request Assigned");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Choose a reuest to process.");
            return;
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnProcessMyJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessMyJobActionPerformed
        // Get the selected row in tblAssigned
        int selectedRow = Assigned.getSelectedRow();

        if (selectedRow >= 0) {
            // Get the work request from the selected row in tblAssigned
            WorkRequest request = (WorkRequest) Assigned.getValueAt(selectedRow, 0);

            // Validate that the request is not null
            if (request != null) {
                // Prompt the user for a message using an input dialog
                String message = JOptionPane.showInputDialog(this, "Enter a message for the request:", "Process Job", JOptionPane.PLAIN_MESSAGE);

                // Check if the user provided a message
                if (message != null && !message.trim().isEmpty()) {
                    // Update the request status and message
                    request.setStatus("In Progress");
                    request.setMessage(message.trim()); // Trim any leading/trailing spaces

                    // Show a success message
                    JOptionPane.showMessageDialog(this, "Service Request updated to 'In Progress' with message: " + message);

                    // Update the status in the original work queue (if necessary)
                    for (WorkRequest wr : par.getWorkQueue().getWorkRequestList()) {
                        if (wr.equals(request)) {
                            wr.setStatus("In Progress");
                            break;
                        }
                    }

                    // Refresh the table to reflect changes
                    populateme();  // Refresh tblAssigned
                } else {
                    // Show an error message if the user did not provide a message
                    JOptionPane.showMessageDialog(this, "Message cannot be empty. Please try again.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid request selected.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Choose a request to process.");
        }
    }//GEN-LAST:event_btnProcessMyJobActionPerformed

    private void btnCloseRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseRequestActionPerformed
        // Get the selected row in tblAssigned
        int selectedRow = Assigned.getSelectedRow();

        if (selectedRow >= 0) {
            // Get the selected WorkRequest
            WorkRequest request = (WorkRequest) Assigned.getValueAt(selectedRow, 0);

            // Mark the request as "Closed"
            request.setStatus("Closed");

            // Remove the request from the user's assigned work queue
            account.getWorkQueue().getWorkRequestList().remove(request);

            // Update the original work queue to reflect the closed status
            for (WorkRequest wr : par.getWorkQueue().getWorkRequestList()) {
                if (wr.equals(request)) {
                    wr.setStatus("Closed");
                    break;
                }
            }

            JOptionPane.showMessageDialog(null, "Service Request Closed");

            // Ensure the sender is a valid UserAccount
            if (request.getSender() instanceof UserAccount) {
                UserAccount sender = (UserAccount) request.getSender();

                // Check if the sender has a ResidentRole and ensure their email is not null
                if (sender.getRole() instanceof ResidentRole) {
                    ResidentRole residentRole = (ResidentRole) sender.getRole();
                    if (sender.getEmail() != null && !sender.getEmail().isEmpty()) {
                        String facility = request.getMessage();  // Assuming the facility info is in the message
                        EmailAlert emailAlert = new EmailAlert();
                        emailAlert.sendMaintenanceRequestClosedEmail(residentRole, facility);
                    } else {
                        System.out.println("No email found for the resident. Skipping email notification.");
                    }
                }
            }

            // Refresh both tables
            populateTable();  // Refresh tblRequests
            populateme();     // Refresh tblAssigned
        } else {
            JOptionPane.showMessageDialog(null, "Choose a request to close.");
        }
    }//GEN-LAST:event_btnCloseRequestActionPerformed
    public void populateme() {
        DefaultTableModel model = (DefaultTableModel) Assigned.getModel();
        model.setRowCount(0); // Clear previous rows

        // Populate tblAssigned with the current work requests assigned to the current user
        for (WorkRequest workl : account.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[0] = workl;
            row[1] = workl.getSender().id;
            row[2] = workl.getReceiver() == null ? null : workl.getReceiver().getUsername();
            row[3] = workl.getStatus();
            row[4] = workl.getMessage();

            model.addRow(row); // Add the row to the table
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Assigned;
    private javax.swing.JButton btnCloseRequest;
    private javax.swing.JButton btnProcessMyJob;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
