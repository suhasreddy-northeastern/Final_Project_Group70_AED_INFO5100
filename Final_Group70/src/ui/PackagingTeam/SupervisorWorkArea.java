/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PackagingTeam;

import business.Business;
import business.Enterprise.PackagingTeamEnterprise;
import business.Organisation.Organisation;
import business.UserAccount.UserAccount;
import business.UserAccount.UserAccountDirectory;
import business.WorkQueue.DeliveryWorkRequest;
import business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class SupervisorWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form PackagingTeamWorkAreaJPanel
     */
    private JPanel workArea;
    private PackagingTeamEnterprise ent;
    private Business business;
    private UserAccount userAccount;

    public SupervisorWorkArea(JPanel userProcessContainer, UserAccount account, PackagingTeamEnterprise ent, Business business) {
        initComponents();

        this.workArea = userProcessContainer;
        this.ent = ent;
        this.business = business;
        this.userAccount = account;

        populateAllDeliveries();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        assigndel = new javax.swing.JButton();
        Addpackage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AssignDelivery = new javax.swing.JTable();
        deliveryguy = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        AssignDelivery1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Packaging Team Supervisor Portal");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 35, 1358, 63));

        assigndel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        assigndel.setText("Assign a Delivery");
        assigndel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        assigndel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigndelActionPerformed(evt);
            }
        });
        add(assigndel, new org.netbeans.lib.awtextra.AbsoluteConstraints(937, 423, 177, 49));

        Addpackage.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        Addpackage.setText("Add package to Deliver");
        Addpackage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Addpackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddpackageActionPerformed(evt);
            }
        });
        add(Addpackage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 230, 40));

        AssignDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Package", "Delivery to Unit No.", "Resident Name", "Status", "DeliveryGuy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AssignDelivery);
        if (AssignDelivery.getColumnModel().getColumnCount() > 0) {
            AssignDelivery.getColumnModel().getColumn(0).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(1).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(2).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(3).setResizable(false);
            AssignDelivery.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 173, 1358, 232));

        deliveryguy.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        deliveryguy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryguyActionPerformed(evt);
            }
        });
        add(deliveryguy, new org.netbeans.lib.awtextra.AbsoluteConstraints(1152, 423, 164, 49));

        AssignDelivery1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Delivery Unit", "Assigned by", "Assigned To", "Status", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(AssignDelivery1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 519, 1027, 288));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/Images/Resident_Buttons.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1390, 840));
    }// </editor-fold>//GEN-END:initComponents

    private void AddpackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddpackageActionPerformed
        // Prompt for package details
        String residentName = JOptionPane.showInputDialog(this, "Enter Resident Name:");
        String residentIdString = JOptionPane.showInputDialog(this, "Enter Unit No.:");
        String packageDetails = JOptionPane.showInputDialog(this, "Enter Package Details:");

        // Validate Resident ID
        int residentId;
        try {
            residentId = Integer.parseInt(residentIdString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Resident ID. Please enter a valid number.");
            return;
        }

        // Check if the delivery already exists (compare by resident ID/apt unit)
        for (WorkRequest request : getAssignDeliveryData()) {
            if (request.getMessage().equals(String.valueOf(residentId))) {  // Compare using residentId (apt unit)
                JOptionPane.showMessageDialog(this, "This package already exists.");
                return;
            }
        }

        // Create a new DeliveryWorkRequest and associate it with the resident's apt unit
        DeliveryWorkRequest workRequest = new DeliveryWorkRequest();
        workRequest.setMessage(String.valueOf(residentId)); // Apt unit (resident ID) as message
        workRequest.setSender(userAccount);
        workRequest.setStatus("Not Delivered");

        // Add to table for display
        DefaultTableModel model = (DefaultTableModel) AssignDelivery.getModel();
        model.addRow(new Object[]{packageDetails, residentId, residentName, "Not Delivered", "Not Assigned"});

        JOptionPane.showMessageDialog(this, "Package added successfully!");

    }//GEN-LAST:event_AddpackageActionPerformed

    private void deliveryguyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryguyActionPerformed

    }//GEN-LAST:event_deliveryguyActionPerformed

    private void assigndelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigndelActionPerformed
        int selectedRowIndex = AssignDelivery.getSelectedRow();
        if (selectedRowIndex == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to assign the delivery.");
            return;
        }

        String packageDetails = (String) AssignDelivery.getValueAt(selectedRowIndex, 0);
        String deliveryGuy = deliveryguy.getText().trim();

        UserAccount deliveryGuyAccount = findDeliveryGuy(deliveryGuy);
        if (deliveryGuyAccount == null) {
            JOptionPane.showMessageDialog(this, "Delivery guy not found.");
            return;
        }

        // Create and assign work request
        DeliveryWorkRequest workRequest = new DeliveryWorkRequest();
        workRequest.setMessage(packageDetails);
        workRequest.setSender(userAccount);
        workRequest.setReceiver(deliveryGuyAccount);
        workRequest.setStatus("In-Transit");

        deliveryGuyAccount.getWorkQueue().getWorkRequestList().add(workRequest);
        AssignDelivery.getModel().setValueAt(deliveryGuy, selectedRowIndex, 4);

        JOptionPane.showMessageDialog(this, "Delivery assigned successfully!");
        populateAllDeliveries();
    }//GEN-LAST:event_assigndelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addpackage;
    private javax.swing.JTable AssignDelivery;
    private javax.swing.JTable AssignDelivery1;
    private javax.swing.JButton assigndel;
    private javax.swing.JTextField deliveryguy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    // Helper function to find the delivery guy user account by username
    private UserAccount findDeliveryGuy(String username) {
        for (Organisation org : ent.getOrganisationDirectory().getOrganisationList()) {
            for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList()) {
                if (userAccount.getUsername().equals(username)) {
                    return userAccount;
                }
            }
        }
        return null;
    }

    private void populateAllDeliveries() {
        DefaultTableModel model = (DefaultTableModel) AssignDelivery1.getModel();
        model.setRowCount(0);  // Clear previous data

        // Fetch work request data
        List<WorkRequest> workRequestList = getAssignDeliveryData();

        // Iterate through the list and populate the table
        for (WorkRequest workRequest : workRequestList) {
            Object[] row = {
                workRequest.getMessage(), // Package Details
                workRequest.getSender().getUsername(), // Delivery to Unit No. (from workRequest)
                workRequest.getReceiver() != null ? workRequest.getReceiver().getUsername() : "Not Assigned", // Resident Name (Delivery Guy)
                workRequest.getStatus(),
                workRequest.getRequestDate() != null ? workRequest.getRequestDate().toString() : "N/A" // Time
            };
            model.addRow(row);
        }
    }

    // You should implement this method to fetch the correct AssignDelivery data
    private List<WorkRequest> getAssignDeliveryData() {
        List<WorkRequest> deliveryData = new ArrayList<>();

        // Iterate through organisations and user accounts to fetch work requests
        for (Organisation org : ent.getOrganisationDirectory().getOrganisationList()) {
            for (UserAccount userAccount : org.getUserAccountDirectory().getUserAccountList()) {
                for (WorkRequest workRequest : userAccount.getWorkQueue().getWorkRequestList()) {
                    deliveryData.add(workRequest);
                }
            }
        }

        // Print the size for debugging
        System.out.println("WorkRequest data size: " + deliveryData.size());
        return deliveryData;
    }
}
