package ui.AdministrativeRole;

import business.Enterprise.Enterprise;
import business.Enterprise.EnterpriseDirectory;
import business.Organisation.Organisation;
import business.UserAccount.UserAccount;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.BevelBorder;
import javax.swing.border.TitledBorder;

public class AnalyticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyticsJPanell
     */
    private BarGraphPanel barGraphPanel;
    private JPanel userProcessContainer;
    private EnterpriseDirectory directory;
    private JButton btnBack;

    public AnalyticsJPanel(JPanel userProcessContainer, EnterpriseDirectory directory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.directory = directory;
        showBarGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void showBarGraph() {
        Integer count = 0, count1 = 0;
        for (Enterprise ent : directory.getEnterpriseList()) {
            for (Organisation org : ent.getOrganisationDirectory().getOrganisationList()) {
                for (UserAccount usracc : org.getUserAccountDirectory().getUserAccountList()) {
                    if (usracc.getId() != -1) {
                        if (usracc.isValidate()) {
                            count++;
                        } else {
                            count1++;
                        }
                    }
                }
            }
        }

        Map<String, Integer> data = new HashMap<>();
        data.put("Lease Approved Residents", count);
        data.put("Lease Not Approved Residents", count1);

        // Create and display the BarGraph
        barGraphPanel = new BarGraphPanel(data);
        barGraphPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK), "Residents' Approval Status", TitledBorder.CENTER, TitledBorder.TOP));
        add(barGraphPanel);

        // Add back button functionality
        btnBack = new JButton("Back");
        btnBack.setFont(new Font("Arial", Font.BOLD, 14));
        btnBack.setForeground(Color.WHITE);
        btnBack.setBackground(new Color(61, 185, 255));
        btnBack.setBorder(new BevelBorder(BevelBorder.RAISED));
        btnBack.setFocusPainted(false);
        btnBack.setPreferredSize(new java.awt.Dimension(150, 40));
        btnBack.addActionListener(evt -> btnBackActionPerformed(evt));

        add(btnBack, BorderLayout.SOUTH);
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {
        // Navigate back to the previous screen using CardLayout
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }

    // Inner class for BarGraphPanel
    private class BarGraphPanel extends JPanel {

        private Map<String, Integer> data;

        public BarGraphPanel(Map<String, Integer> data) {
            this.data = data;
            setPreferredSize(new java.awt.Dimension(500, 300)); // Adjust panel dimensions
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            int barWidth = 80;
            int spaceBetweenBars = 100;
            int x = 50;
            int maxHeight = getHeight() - 50;

            for (Map.Entry<String, Integer> entry : data.entrySet()) {
                String label = entry.getKey();
                int value = entry.getValue();
                int barHeight = (int) ((double) value / getMaxValue(data) * maxHeight);

                // Customized colors for bars and labels
                g.setColor(new Color(76, 175, 80)); // Green color for bars
                g.fillRect(x, getHeight() - barHeight, barWidth, barHeight);

                g.setColor(Color.BLACK);
                g.drawString(label, x + barWidth / 2 - g.getFontMetrics().stringWidth(label) / 2, getHeight() - 10);

                x += barWidth + spaceBetweenBars;
            }
        }

        private int getMaxValue(Map<String, Integer> data) {
            return data.values().stream().max(Integer::compare).orElse(0);
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 230, 253));
        setLayout(new java.awt.CardLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        jPanel1.setVisible(false);
//        Residents.setVisible(true);
//        Maintenance.setVisible(false);
//        Pest.setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//        jPanel1.setVisible(false);
//        Residents.setVisible(false);
//        Maintenance.setVisible(true);
//        Pest.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//        jPanel1.setVisible(false);
//        Residents.setVisible(false);
//        Maintenance.setVisible(false);
//        Pest.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
