/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.AdministrativeRole;

import business.Business;
import business.EmailAlert.EmailAlert;
import business.Organisation.Organisation;
import business.Enterprise.Enterprise;
import business.Role.ResidentRole;
import business.Role.Role;
import static business.Role.Role.RoleType.Residents;
import business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class ManageUserAccountJPanel extends javax.swing.JPanel {

    private JPanel container;
    private Business business;
    private Integer j = 4;

    public ManageUserAccountJPanel(JPanel container, Business business) {
        initComponents();
        this.business = business;
        this.container = container;

        popOrganizationComboBox();
        users();
        Enterprise organization = (Enterprise) cmbOrganization.getSelectedItem();
        if (organization != null) {
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }

        popUserAccountsTable();
    }

    // Show or hide the email field based on selected role
    private void handleRoleChange() {
        Role selectedRole = (Role) cmbRoles.getSelectedItem();
        if (selectedRole != null && selectedRole.type == Role.RoleType.Residents) {
            lblEmail.setVisible(true);
            txtEmail.setVisible(true); // Show Email field for Residents
        } else {
            lblEmail.setVisible(false);
            txtEmail.setVisible(false); // Hide Email field for non-Residents
        }
    }

    public void popOrganizationComboBox() {
        cmbOrganization.removeAllItems();

        for (Enterprise organization : business.getEnterpriseDirectory().getEnterpriseList()) {
            cmbOrganization.addItem(organization);
        }
    }

    public void populateEmployeeComboBox(Enterprise organization) {
        cmbEmployee.removeAllItems();

        for (Organisation organisation : organization.getOrganisationDirectory().getOrganisationList()) {
            cmbEmployee.addItem(organisation);
        }
    }

    private void populateRoleComboBox(Enterprise organization) {
        cmbRoles.removeAllItems();
        for (Role role : organization.getSupportedRole()) {
            cmbRoles.addItem(role);
        }
    }

    public void popUserAccountsTable() {
        DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();

        model.setRowCount(0);  // Clear previous data

        // Iterate over the users and add them to the table
        for (Enterprise enterprise : business.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organisation org : enterprise.getOrganisationDirectory().getOrganisationList()) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[4];  // Updated to 4 columns (User Name, Role, Org ID, Email)
                    row[0] = ua.getUsername();  // Add the username
                    row[1] = ua.getRole().toString();  // Add the role
                    row[2] = org.getId();  // Add organisation ID
                    row[3] = ua.getEmail();  // Add the email address

                    model.addRow(row);  // Add row to the table model
                }
            }
        }
    }

    public void users() {
        Enterprise organization = (Enterprise) cmbOrganization.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        grpNewUser = new javax.swing.JPanel();
        btnCreateUser = new javax.swing.JButton();
        txtUserName = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblEmployee = new javax.swing.JLabel();
        cmbEmployee = new javax.swing.JComboBox();
        lblOrganization = new javax.swing.JLabel();
        cmbOrganization = new javax.swing.JComboBox();
        lblRole = new javax.swing.JLabel();
        cmbRoles = new javax.swing.JComboBox();
        lblCreateUser = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblUsersList = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblUsers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        tblUsers.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role", "Organisation ID", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setResizable(false);
            tblUsers.getColumnModel().getColumn(1).setResizable(false);
            tblUsers.getColumnModel().getColumn(2).setResizable(false);
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 168, 600, 411));

        grpNewUser.setBackground(new java.awt.Color(204, 255, 255));
        grpNewUser.setBorder(javax.swing.BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(0, 0, 0)));

        btnCreateUser.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnCreateUser.setText("Create User");
        btnCreateUser.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserActionPerformed(evt);
            }
        });

        lblUserName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblUserName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUserName.setText("User Name:");

        lblPassword.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPassword.setText("Password:");

        lblEmployee.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblEmployee.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmployee.setText("Organisation:");

        cmbEmployee.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmployeeActionPerformed(evt);
            }
        });

        lblOrganization.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblOrganization.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOrganization.setText("Enterprise :");

        cmbOrganization.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOrganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrganizationActionPerformed(evt);
            }
        });

        lblRole.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblRole.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRole.setText("Role:");

        cmbRoles.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbRoles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRolesActionPerformed(evt);
            }
        });

        lblCreateUser.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCreateUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateUser.setText("Create New User");
        lblCreateUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblEmail.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lblEmail.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblEmail.setText("Email:");

        javax.swing.GroupLayout grpNewUserLayout = new javax.swing.GroupLayout(grpNewUser);
        grpNewUser.setLayout(grpNewUserLayout);
        grpNewUserLayout.setHorizontalGroup(
            grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(grpNewUserLayout.createSequentialGroup()
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(grpNewUserLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(lblCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(grpNewUserLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblOrganization)
                                .addComponent(lblEmployee)
                                .addComponent(lblRole)
                                .addComponent(lblUserName)
                                .addComponent(lblPassword)))
                        .addGap(31, 31, 31)
                        .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbRoles, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(grpNewUserLayout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(btnCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grpNewUserLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbEmployee, cmbOrganization, cmbRoles, lblEmployee, lblOrganization, lblPassword, lblRole, lblUserName, txtPassword, txtUserName});

        grpNewUserLayout.setVerticalGroup(
            grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, grpNewUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrganization)
                    .addComponent(cmbOrganization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployee)
                    .addComponent(cmbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(cmbRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(grpNewUserLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(lblUserName))
                    .addGroup(grpNewUserLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(grpNewUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addComponent(btnCreateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grpNewUserLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbEmployee, cmbOrganization, cmbRoles, lblEmployee, lblOrganization, lblPassword, lblRole, lblUserName, txtPassword, txtUserName});

        add(grpNewUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(747, 103, -1, 476));

        btnBack.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 743, 97, 39));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("MANAGE USERS");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 20, 1364, 39));

        lblUsersList.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblUsersList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsersList.setText("Users List");
        lblUsersList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(lblUsersList, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 103, 600, 47));

        btnDelete.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        btnDelete.setText("Delete a User");
        btnDelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(529, 597, -1, 44));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/Images/AdminWorkAreabuttons.jpg"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1390, 870));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserActionPerformed
        String userName = txtUserName.getText();
        String password = txtPassword.getText();
        String email = txtEmail.getText();  // Get email from the text field

        // Validate username and password format
        String userregex = "^(?=.*[0-9])(?=.*[a-zA-Z]).{5,}$";
        String passregex = "^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).{8,}$";

        // Email validation regex
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";

        // Validate username
        if (!userName.matches(userregex)) {
            JOptionPane.showMessageDialog(null, "Username must contain at least 1 letter and 1 number and should be of at least length 5.");
            return;
        }

        // Validate password
        if (!password.matches(passregex)) {
            JOptionPane.showMessageDialog(null, "Password must contain at least 1 capital letter, 1 number, 1 special character, and should be of at least length 8.");
            return;
        }

        // Validate email format
        if (!email.matches(emailRegex)) {
            JOptionPane.showMessageDialog(null, "Invalid email format. Please enter a valid email address.");
            return;
        }

        // Check if the email already exists
        if (isEmailExists(email)) {
            JOptionPane.showMessageDialog(null, "Email already exists. Please use a different email address.");
            return;
        }

        // Check if the username already exists
        if (isUsernameExists(userName)) {
            JOptionPane.showMessageDialog(null, "Username already exists. Please choose a different username.");
            return;
        }

        // Get selected organization and role
        Enterprise organization = (Enterprise) cmbOrganization.getSelectedItem();
        Organisation org = (Organisation) cmbEmployee.getSelectedItem();
        Role role = (Role) cmbRoles.getSelectedItem();

        // Create user account and store email if the role is Residents
        if (role.type == Role.RoleType.Residents) {
            org.getUserAccountDirectory().createResAccount(userName, password, j, org, ResidentRole.createResidentRole());
            // Get the newly created user account
            UserAccount newUser = org.getUserAccountDirectory().getUserAccountList().get(org.getUserAccountDirectory().getUserAccountList().size() - 1);
            newUser.setEmail(email); // Set email for the user account

            // Get the resident role and set the user account
            ResidentRole residentRole = (ResidentRole) newUser.getRole();
            residentRole.setUserAccount(newUser);  // This is important: ensure userAccount is set in ResidentRole

            // Send email to the new resident with the login details
            EmailAlert emailAlert = new EmailAlert();
            emailAlert.sendUserCreatedEmail(residentRole, userName, password); // Send email with credentials
        } else {
            org.getUserAccountDirectory().createUserAccount(userName, password, org, role);
        }

        // Refresh the user accounts table
        popUserAccountsTable();

        JOptionPane.showMessageDialog(null, "User Account added successfully.");

        // Clear input fields
        txtUserName.setText("");
        txtPassword.setText("");
        txtEmail.setText("");
    }//GEN-LAST:event_btnCreateUserActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbOrganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrganizationActionPerformed
        Enterprise organization = (Enterprise) cmbOrganization.getSelectedItem();
        if (organization != null) {
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_cmbOrganizationActionPerformed

    private void cmbEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbEmployeeActionPerformed

    private void cmbRolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRolesActionPerformed
        // TODO add your handling code here
        handleRoleChange(); //Handle visibility of email field when role changes
    }//GEN-LAST:event_cmbRolesActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Get the selected row from the user table
        int selectedRow = tblUsers.getSelectedRow();

        // Check if a row is selected
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a user to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Ask for confirmation before deleting
        int confirmation = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this user?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirmation != JOptionPane.YES_OPTION) {
            // If the user chooses "No," simply return
            return;
        }

        // Get the username and organization ID from the selected row
        String username = (String) tblUsers.getValueAt(selectedRow, 0);
        String orgId = tblUsers.getValueAt(selectedRow, 2).toString();

        // Initialize a flag to track if deletion was successful
        boolean userDeleted = false;

        System.out.println("Attempting to delete user: " + username + " from organization ID: " + orgId);

        // Iterate through enterprises and organizations to find and delete the user
        for (Enterprise enterprise : business.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organisation org : enterprise.getOrganisationDirectory().getOrganisationList()) {
                if (String.valueOf(org.getId()).equals(orgId)) { // Match organization ID
                    UserAccount userToDelete = null;
                    for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                        if (ua.getUsername().equals(username)) { // Match username
                            userToDelete = ua;
                            break;
                        }
                    }
                    if (userToDelete != null) {
                        org.getUserAccountDirectory().getUserAccountList().remove(userToDelete);
                        userDeleted = true; // Set the flag to true
                        System.out.println("User " + username + " successfully deleted from organization ID: " + orgId);
                        break; // Exit the loop after deleting the user
                    }
                }
            }
            if (userDeleted) {
                break; // Exit outer loop if user is deleted
            }
        }

        // Check the result of the deletion process
        if (userDeleted) {
            JOptionPane.showMessageDialog(this, "User deleted successfully.", "Info", JOptionPane.INFORMATION_MESSAGE);
            popUserAccountsTable(); // Refresh the table
        } else {
            System.out.println("Failed to delete user: " + username + ". User not found.");
            JOptionPane.showMessageDialog(this, "User not found or could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateUser;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox cmbEmployee;
    private javax.swing.JComboBox cmbOrganization;
    private javax.swing.JComboBox cmbRoles;
    private javax.swing.JPanel grpNewUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreateUser;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblOrganization;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblUsersList;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    //Helper Methods
    // Method to check if email already exists
    private boolean isEmailExists(String email) {
        for (Enterprise enterprise : business.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organisation org : enterprise.getOrganisationDirectory().getOrganisationList()) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    // Check if the email is not null and equals the input email
                    if (ua.getEmail() != null && ua.getEmail().equalsIgnoreCase(email)) {
                        return true; // Email already exists
                    }
                }
            }
        }
        return false; // Email does not exist
    }

    private boolean isUsernameExists(String userName) {
        for (Enterprise enterprise : business.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organisation org : enterprise.getOrganisationDirectory().getOrganisationList()) {
                for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                    if (ua.getUsername().equalsIgnoreCase(userName)) {
                        return true; // Username already exists
                    }
                }
            }
        }
        return false; // Username does not exist
    }
}
