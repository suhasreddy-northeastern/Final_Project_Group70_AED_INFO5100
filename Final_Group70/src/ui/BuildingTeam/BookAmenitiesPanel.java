package ui.BuildingTeam;

import business.Organisation.AmenityManager;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.Date;
import com.toedter.calendar.JDateChooser;
import java.text.SimpleDateFormat;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

public class BookAmenitiesPanel extends javax.swing.JPanel {

    private JDateChooser dateChooser;

    /**
     * Creates new form BookAmenitiesPanel
     */
    public BookAmenitiesPanel() {
        initComponents();
        initializeTable();
        populateAmenityComboBox();
        initializeDateChooser();
        initializeTimeComboBoxes();
    }

    private void initializeDateChooser() {
        lblDate = new JLabel("Select Date:");  // Create a label for the date
        lblDate.setBounds(50, 100, 100, 30);  // Set position for the label
        this.add(lblDate);  // Add the label to the panel

        dateChooser = new JDateChooser();
        dateChooser.setDateFormatString("MM/dd/yyyy");
        dateChooser.setBounds(150, 100, 150, 30);  // Set position for the date chooser
        this.add(dateChooser);
    }

    private void populateAmenityComboBox() {
        // Create an instance of AmenityManager
        AmenityManager amenityManager = new AmenityManager();

        // Get the available amenities from the model class
        java.util.List<String> amenities = amenityManager.getAvailableAmenities();

        // Clear existing items
        jComboBoxAmenity.removeAllItems();

        // Add the amenities to the combo box
        for (String amenity : amenities) {
            jComboBoxAmenity.addItem(amenity);
        }
    }

    private void initializeTimeComboBoxes() {
        jComboBoxFromTime.removeAllItems();
        jComboBoxToTime.removeAllItems();
        // Populate the combo boxes with time options
        String[] times = {"9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM"};

        // Set time options for both From and To time combo boxes
        for (String time : times) {
            jComboBoxFromTime.addItem(time);
            jComboBoxToTime.addItem(time);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblBookAmenity = new javax.swing.JLabel();
        jComboBoxAmenity = new javax.swing.JComboBox<>();
        Btnbook = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jComboBoxFromTime = new javax.swing.JComboBox<>();
        jComboBoxToTime = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAmenityBookings = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 253, 253));

        lblBookAmenity.setFont(new java.awt.Font("Kohinoor Devanagari", 3, 24)); // NOI18N
        lblBookAmenity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBookAmenity.setText("Book Amenities");

        jComboBoxAmenity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Btnbook.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        Btnbook.setText("Book");
        Btnbook.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Btnbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnbookActionPerformed(evt);
            }
        });

        BtnBack.setText("Back");
        BtnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Amenity:");

        jComboBoxFromTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFromTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFromTimeActionPerformed(evt);
            }
        });

        jComboBoxToTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("to");

        jLabel5.setText("Time:");

        tblAmenityBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Amenity", "Date", "From", "To"
            }
        ));
        jScrollPane1.setViewportView(tblAmenityBookings);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("Your Bookings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblBookAmenity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxToTime, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxFromTime, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxAmenity, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Btnbook, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(85, 85, 85)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(391, 391, 391))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblBookAmenity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BtnBack)
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxAmenity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(lblDate)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxFromTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxToTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(32, 32, 32)
                        .addComponent(Btnbook))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BtnbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnbookActionPerformed
        // Get selected values from combo boxes and date picker
        String amenity = (String) jComboBoxAmenity.getSelectedItem();

        // Get the selected date from JDateChooser
        Date selectedDate = dateChooser.getDate();
        String date = null;

        if (selectedDate != null) {
            // Format the date
            date = new SimpleDateFormat("MM/dd/yyyy").format(selectedDate);
        }

        String fromTime = (String) jComboBoxFromTime.getSelectedItem();
        String toTime = (String) jComboBoxToTime.getSelectedItem();

        // Input validation
        if (amenity == null || amenity.isEmpty() || date == null || fromTime == null || toTime == null) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate if From Time is earlier than To Time using SimpleDateFormat
        SimpleDateFormat timeFormat = new SimpleDateFormat("h:mm a");

        try {
            Date from = timeFormat.parse(fromTime);
            Date to = timeFormat.parse(toTime);

            if (from.after(to)) {
                JOptionPane.showMessageDialog(this, "'From Time' must be earlier than 'To Time'.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check for a minimum duration of 1 hour
            long durationInMillis = to.getTime() - from.getTime();
            long durationInMinutes = durationInMillis / (1000 * 60);  // Convert milliseconds to minutes

            if (durationInMinutes < 60) {
                JOptionPane.showMessageDialog(this, "The minimum booking duration is 1 hour.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error parsing time", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if there's a duplicate booking
        if (checkForDuplicateBooking(amenity, date, fromTime, toTime)) {
            JOptionPane.showMessageDialog(this, "This time slot is already booked for the selected amenity.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Populate the table with booking details
        DefaultTableModel model = (DefaultTableModel) tblAmenityBookings.getModel();
        model.addRow(new Object[]{amenity, date, fromTime, toTime});

        // Confirmation message
        JOptionPane.showMessageDialog(this, "Amenity booked successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Clear inputs
        dateChooser.setDate(null);  // Clear the selected date
        jComboBoxFromTime.setSelectedIndex(0);  // Reset the time selection
        jComboBoxToTime.setSelectedIndex(0);  // Reset the time selection
        jComboBoxAmenity.setSelectedIndex(0);  // Reset the amenity selection
    }//GEN-LAST:event_BtnbookActionPerformed

    private boolean checkForDuplicateBooking(String amenity, String date, String fromTime, String toTime) {
        // Get the model of the table
        DefaultTableModel model = (DefaultTableModel) tblAmenityBookings.getModel();

        // Iterate through the rows of the table to check for duplicate bookings
        for (int i = 0; i < model.getRowCount(); i++) {
            String existingAmenity = (String) model.getValueAt(i, 0); // Get the amenity from the existing row
            String existingDate = (String) model.getValueAt(i, 1); // Get the date from the existing row
            String existingFromTime = (String) model.getValueAt(i, 2); // Get the from time from the existing row
            String existingToTime = (String) model.getValueAt(i, 3); // Get the to time from the existing row

            // Check if the same amenity, date, and time slot already exists
            if (existingAmenity.equals(amenity) && existingDate.equals(date) && existingFromTime.equals(fromTime) && existingToTime.equals(toTime)) {
                return true; // Found a duplicate booking
            }
        }
        return false; // No duplicate found
    }
    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        // Navigate back to the previous panel
        JPanel parentPanel = (JPanel) this.getParent();
        parentPanel.setVisible(true); // Show the parent panel
        this.setVisible(false);
    }//GEN-LAST:event_BtnBackActionPerformed

    private void jComboBoxFromTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFromTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFromTimeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JButton Btnbook;
    private javax.swing.JComboBox<String> jComboBoxAmenity;
    private javax.swing.JComboBox<String> jComboBoxFromTime;
    private javax.swing.JComboBox<String> jComboBoxToTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBookAmenity;
    private javax.swing.JLabel lblDate;
    private javax.swing.JTable tblAmenityBookings;
    // End of variables declaration//GEN-END:variables
private void initializeTable() {
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"Amenity", "Date", "From", "To"}
        );
        tblAmenityBookings.setModel(model);
    }

}
